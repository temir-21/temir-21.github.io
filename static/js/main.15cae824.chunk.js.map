{"version":3,"sources":["components/CustomizedTableCourseExchange.jsx","containers/CourseExchange.jsx","App.js","serviceWorker.js","index.js"],"names":["primary","code","color","CustomTableCell","withStyles","theme","head","backgroundColor","blueGrey","palette","common","white","border","fontSize","body","TableCell","root","width","marginTop","spacing","unit","overflowX","table","minWidth","row","&","props","classes","countryData","react_default","a","createElement","Paper_default","className","Table_default","TableHead_default","TableRow_default","align","TableBody_default","map","country","index","key","currency","src","concat","flagCountry","alt","codeCountry","rate","userParameters","apiKey","CourseExchange","state","createData","fetchCourseExchangeData","_ref","fetch","then","res","json","data","_this","rates","KZT","USD","EUR","setState","catch","error","console","log","getDataNow","moment","locale","format","this","Fragment","components_CustomizedTableCourseExchange","Component","App","containers_CourseExchange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15cae824.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport '../flags/flags.css';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\n\r\nconst primary = (code, color) => {\r\n    return color[code];\r\n};\r\n\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n      backgroundColor: primary(900, blueGrey),\r\n      color: theme.palette.common.white,\r\n      border: '1px solid #FFFFFF',\r\n      fontSize: 20,\r\n    },\r\n    body: {\r\n      fontSize: 18,\r\n      border: '1px solid #FFFFFF'\r\n    },\r\n}))(TableCell);\r\n  \r\n  const styles = theme => ({\r\n    root: {\r\n      width: '80%',\r\n      marginTop: theme.spacing.unit * 3,\r\n      overflowX: 'auto',\r\n    },\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    row: {\r\n      '&': {\r\n        backgroundColor: primary(300, blueGrey)\r\n      },\r\n    }\r\n  });\r\n\r\n  function CustomizedTableCourseExchange(props) {\r\n    const { classes, countryData } = props;\r\n    debugger\r\n    return (\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <CustomTableCell>Валюта</CustomTableCell>\r\n              <CustomTableCell align=\"right\">Флаг</CustomTableCell>\r\n              <CustomTableCell align=\"right\">Букв. код</CustomTableCell>\r\n              <CustomTableCell align=\"right\">Единиц</CustomTableCell>\r\n              <CustomTableCell align=\"right\">Курс</CustomTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {countryData.map((country, index) => (\r\n              <TableRow className={classes.row} key={index}>\r\n                <CustomTableCell>\r\n                  {country.currency}\r\n                </CustomTableCell>\r\n                <CustomTableCell align=\"right\"><img src=\"blank.gif\" className={`flag ${country.flagCountry}`} alt=\"\" /></CustomTableCell>\r\n                <CustomTableCell align=\"right\">{country.codeCountry}</CustomTableCell>\r\n                <CustomTableCell align=\"right\">{country.unit}</CustomTableCell>\r\n                <CustomTableCell align=\"right\">{country.rate}</CustomTableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\nexport default withStyles(styles)(CustomizedTableCourseExchange);","import React, { Component } from 'react';\r\nimport CustomizedTableCourseExchange from '../components/CustomizedTableCourseExchange';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ru';\r\nimport '../App.css';\r\n\r\nconst userParameters = {\r\n    apiKey: '14eb9169feff107866965967',\r\n    country: 'RUB'\r\n}\r\n\r\nclass CourseExchange extends Component {\r\n    state = {\r\n        countryData: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchCourseExchangeData(userParameters);\r\n    }\r\n\r\n    createData = (currency, flagCountry, codeCountry, unit, rate) => {\r\n        return { currency, flagCountry, codeCountry, unit, rate }\r\n    }\r\n\r\n    fetchCourseExchangeData = ({ apiKey, country }) => {\r\n        fetch(`https://v3.exchangerate-api.com/bulk/${apiKey}/${country}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const countryData = [\r\n                    this.createData('Тенге', 'flag-kz', 'KZT', 1, data.rates.KZT),\r\n                    this.createData('Доллар', 'flag-us', 'USD', 1, data.rates.USD),\r\n                    this.createData('Евро', 'flag-eu', 'EUR', 1, data.rates.EUR),\r\n                ];\r\n                this.setState({\r\n                    countryData\r\n                })\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    getDataNow = () => {\r\n        moment.locale('ru');\r\n        \r\n        let now = moment();\r\n        return now.format('dddd, MMMM DD YYYY');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Курсы валют РФ на {this.getDataNow()}</h1>\r\n                <div className=\"course-exchange-container\">\r\n                    <CustomizedTableCourseExchange countryData={this.state.countryData} />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CourseExchange;","import React, { Component } from 'react';\nimport CourseExchange from './containers/CourseExchange';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <CourseExchange />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}